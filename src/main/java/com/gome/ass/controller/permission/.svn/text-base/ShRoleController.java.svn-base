package com.gome.ass.controller.permission;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.gome.ass.entity.ShPosition;
import com.gome.ass.entity.ShRole;
import com.gome.ass.entity.ShRoleMenu;
import com.gome.ass.service.permission.ShRoleService;
import com.gome.ass.util.BeanMapUtils;
import com.gome.ass.util.JsonUtil;
import com.gome.common.page.Page;

@Controller
@RequestMapping("role")
public class ShRoleController {
    
    @Resource
    private ShRoleService shRoleService;
    
    @RequestMapping("shRoleListView")
    public String shDeviceListView(){
        return "permission/roleList";
    }
    
    @RequestMapping("importRoleView")
    public String importRoleView(){
    	return "permission/roleImport";
    }
    
    @RequestMapping(value="getRolePageList", produces="text/plain;charset=utf-8")
    @ResponseBody
    public String getRolePageList(Page page, ShRoleMenu role) throws Exception {
        Map<String, Object> map = BeanMapUtils.convertBean(role);
        page.setParam(map);
        List<Map<String, Object>> list = shRoleService.getRolePageList(page);
        return JsonUtil.writeListToDataGrid(page.getTotalResult(), list);
    }
    
    @RequestMapping(value="getRoleResource", produces="text/plain;charset=utf-8")
    @ResponseBody
    public String getRoleResource(String roleId) throws Exception {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("roleId", roleId);
        List<Map<String, Object>> list = shRoleService.getRoleResource(map);
        return JsonUtil.javaObjectToJsonString(list);
    }
    
    @RequestMapping(value = "/inOrUp", produces = "text/plain;charset=utf-8")
	public @ResponseBody
	String inOrUp(HttpServletRequest request, ShRole role) {
		String result = null;
		try {
			Map<String, Object> map = BeanMapUtils.convertBean(role);
			map.put("menuIds", request.getParameter("menuIds"));
			if(StringUtils.isNotBlank(role.getRoleId())){
				this.shRoleService.updateShRoleResources(map);
				result = "修改角色成功！";
			}else{
				this.shRoleService.insertRoleResource(map);
				result = "新增角色成功！";
			}
		} catch (Exception e) {
			result = "服务器异常";
		}
		return result;
	}
       
    @RequestMapping(value="/delete", produces="text/plain;charset=UTF-8")
    public @ResponseBody String delete(HttpServletRequest request) throws Exception{
        String result = null;
        try {
            String roleIds = request.getParameter("roleIds");
            Map<String,Object> inMap = new HashMap<String,Object>();
            if(null != roleIds && !"".equals(roleIds)){
                inMap.put("roleIds", roleIds.split(","));
            }else{
                inMap.put("roleIds", null);
            }
            this.shRoleService.deleteShRole(inMap);
            result = "删除数据成功";
        } catch (Exception e) {
            e.printStackTrace();
            result = "服务器异常";
        }
        return result;
    }
    

	@RequestMapping(value = "/importExcel")
	@ResponseBody
	public String importExcel(HttpServletRequest request,HttpServletResponse response) {
		String result = null;
		MultipartHttpServletRequest mulRequest = (MultipartHttpServletRequest) request;
		MultipartFile file = mulRequest.getFile("file");
		String filename = file.getOriginalFilename();
		if (filename == null || "".equals(filename)) {
			return null;
		}
		List<ShPosition> positions = new ArrayList<ShPosition>();
		try {
			InputStream input = file.getInputStream();
			Workbook workBook = null;
			try {
				workBook = new XSSFWorkbook(input);//Excel 2007
	        } catch (Exception ex) {
	        	workBook = new HSSFWorkbook(input);//兼容Excel 2003
	        }
			Sheet sheet = workBook.getSheetAt(0);
			if (sheet != null) {
				for (int i = 1; i < sheet.getPhysicalNumberOfRows(); i++) {
					Row row = sheet.getRow(i);
					ShPosition position = new ShPosition();
					for (int j = 0; j < row.getPhysicalNumberOfCells(); j++) {
						Cell cell = row.getCell(j);
						String cellStr = cell.toString().trim();
						if(j==0){
							position.setCode(cellStr);
						} else if(j==1){
							position.setName(cellStr);
						} else if(j==2){
							position.setMenuId(cellStr);
						} else if(j==3){
							position.setMenuName(cellStr);
						}
					}
					positions.add(position);
				}
			}
			Map<String, String> MapResult = shRoleService.insertShPosition(positions);
			result = JsonUtil.toJson(MapResult);
		} catch (Exception e) {
			e.printStackTrace();
			StringBuffer sb = new StringBuffer("{\"flag\" : \"failure\",");
			sb.append("\"msg\":"+e.getMessage());
			sb.append("}");
		}
		return result;
	}

}
